package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ OpenWeatherMap
type WeatherResponse struct {
	Name string `json:"name"`
	Main struct {
		Temp      float64 `json:"temp"`
		FeelsLike float64 `json:"feels_like"`
		Humidity  int     `json:"humidity"`
	} `json:"main"`
	Wind struct {
		Speed float64 `json:"speed"`
	} `json:"wind"`
	Weather []struct {
		Description string `json:"description"`
		Icon        string `json:"icon"`
	} `json:"weather"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π
type ForecastResponse struct {
	List []struct {
		Dt   int64 `json:"dt"`
		Main struct {
			Temp      float64 `json:"temp"`
			FeelsLike float64 `json:"feels_like"`
			Humidity  int     `json:"humidity"`
		} `json:"main"`
		Weather []struct {
			Description string `json:"description"`
			Icon        string `json:"icon"`
		} `json:"weather"`
		Wind struct {
			Speed float64 `json:"speed"`
		} `json:"wind"`
		DtTxt string `json:"dt_txt"`
	} `json:"list"`
	City struct {
		Name string `json:"name"`
	} `json:"city"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
type WeatherCache struct {
	data map[string]CacheItem
	mu   sync.RWMutex
}

type CacheItem struct {
	weatherData string
	timestamp   time.Time
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
var weatherCache = &WeatherCache{
	data: make(map[string]CacheItem),
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
func (c *WeatherCache) Get(city string) (string, bool) {
	c.mu.RLock()
	defer c.mu.RUnlock()

	item, exists := c.data[strings.ToLower(city)]
	if !exists {
		return "", false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞ (30 –º–∏–Ω—É—Ç)
	if time.Since(item.timestamp) > 30*time.Minute {
		return "", false
	}

	return item.weatherData, true
}

// –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
func (c *WeatherCache) Set(city, data string) {
	c.mu.Lock()
	defer c.mu.Unlock()

	c.data[strings.ToLower(city)] = CacheItem{
		weatherData: data,
		timestamp:   time.Now(),
	}
}

func getWeather(city string) (string, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	if cachedData, ok := weatherCache.Get(city); ok {
		return cachedData, nil
	}

	apiKey := os.Getenv("OWM_API_KEY")

	url := fmt.Sprintf(
		"http://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s&units=metric&lang=ru",
		city,
		apiKey,
	)

	resp, err := http.Get(url)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("–≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ API")
	}

	var data WeatherResponse
	if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	weatherMsg := fmt.Sprintf(
		"üå§ –ü–æ–≥–æ–¥–∞ –≤ %s:\n"+
			"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.0f¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.0f¬∞C)\n"+
			"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: %d%%\n"+
			"üå¨ –í–µ—Ç–µ—Ä: %.0f –º/—Å\n"+
			"üìù %s",
		data.Name,
		data.Main.Temp,
		data.Main.FeelsLike,
		data.Main.Humidity,
		data.Wind.Speed,
		data.Weather[0].Description,
	)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
	weatherCache.Set(city, weatherMsg)

	return weatherMsg, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π
func getForecast(city string) (string, error) {
	apiKey := os.Getenv("OWM_API_KEY")

	url := fmt.Sprintf(
		"http://api.openweathermap.org/data/2.5/forecast?q=%s&appid=%s&units=metric&lang=ru",
		city,
		apiKey,
	)

	resp, err := http.Get(url)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("–≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ API")
	}

	var data ForecastResponse
	if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	forecastMsg := fmt.Sprintf("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è %s:\n\n", data.City.Name)

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
	currentDay := ""
	for i, item := range data.List {
		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –¥–Ω–µ–π (–º–∞–∫—Å–∏–º—É–º 15 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
		if i >= 15 {
			break
		}

		// –ò–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "2023-05-15 12:00:00" –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
		date := strings.Split(item.DtTxt, " ")[0]
		t, _ := time.Parse("2006-01-02", date)
		formattedDate := t.Format("02.01")

		// –ï—Å–ª–∏ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤—ã–≤–æ–¥–∏–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
		if currentDay != formattedDate {
			currentDay = formattedDate
			forecastMsg += fmt.Sprintf("\nüìÖ %s:\n", formattedDate)
		}

		// –í—Ä–µ–º—è
		timeStr := strings.Split(item.DtTxt, " ")[1]
		timeStr = strings.Split(timeStr, ":")[0] + ":00"

		forecastMsg += fmt.Sprintf("‚è∞ %s: %.0f¬∞C, %s\n",
			timeStr,
			item.Main.Temp,
			item.Weather[0].Description,
		)
	}

	return forecastMsg, nil
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
func getWeatherByCoords(lat, lon float64) (string, error) {
	apiKey := os.Getenv("OWM_API_KEY")

	url := fmt.Sprintf(
		"http://api.openweathermap.org/data/2.5/weather?lat=%.6f&lon=%.6f&appid=%s&units=metric&lang=ru",
		lat,
		lon,
		apiKey,
	)

	resp, err := http.Get(url)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö API")
	}

	var data WeatherResponse
	if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	weatherMsg := fmt.Sprintf(
		"üìç –ü–æ–≥–æ–¥–∞ –≤ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ (%s):\n"+
			"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.0f¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.0f¬∞C)\n"+
			"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: %d%%\n"+
			"üå¨ –í–µ—Ç–µ—Ä: %.0f –º/—Å\n"+
			"üìù %s",
		data.Name,
		data.Main.Temp,
		data.Main.FeelsLike,
		data.Main.Humidity,
		data.Wind.Speed,
		data.Weather[0].Description,
	)

	return weatherMsg, nil
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
	if err := godotenv.Load(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: %v", err)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
	telegramToken := os.Getenv("TELEGRAM_TOKEN")
	if telegramToken == "" {
		log.Fatal("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}

	owmApiKey := os.Getenv("OWM_API_KEY")
	if owmApiKey == "" {
		log.Fatal("OWM_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(telegramToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %v", err)
	}
	bot.Debug = true // –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s", bot.Self.UserName)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (updates)
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –ö–∞—Ä—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	userLastCity := make(map[int64]string)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
	for update := range updates {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
		if update.Message != nil {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
			switch update.Message.Text {
			case "/start", "/help":
				msg.Text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. üå§\n\n" +
					"–í—ã –º–æ–∂–µ—Ç–µ:\n" +
					"‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã\n" +
					"‚Ä¢ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞\n" +
					"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–≥–æ–¥—ã –≤ –≤–∞—à–µ–π —Ç–æ—á–∫–µ\n\n" +
					"–ö–æ–º–∞–Ω–¥—ã:\n" +
					"/start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n" +
					"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
					"/forecast - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"

				// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
				locationButton := tgbotapi.NewKeyboardButtonLocation("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
				msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
					tgbotapi.NewKeyboardButtonRow(locationButton),
				)

			case "/forecast":
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞
				city, exists := userLastCity[update.Message.Chat.ID]
				if !exists {
					msg.Text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–≥–æ–¥—É –¥–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –≥–æ—Ä–æ–¥–∞."
				} else {
					forecast, err := getForecast(city)
					if err != nil {
						msg.Text = "‚ùå –û—à–∏–±–∫–∞: " + err.Error()
					} else {
						msg.Text = forecast
					}
				}

			default:
				city := update.Message.Text
				weatherInfo, err := getWeather(city)
				if err != nil {
					msg.Text = "‚ùå –û—à–∏–±–∫–∞: " + err.Error()
				} else {
					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
					userLastCity[update.Message.Chat.ID] = city

					msg.Text = weatherInfo

					// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
					forecastButton := tgbotapi.NewInlineKeyboardButtonData("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", "forecast:"+city)
					msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
						tgbotapi.NewInlineKeyboardRow(forecastButton),
					)
				}
			}

			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
			if update.Message.Location != nil {
				weather, err := getWeatherByCoords(
					update.Message.Location.Latitude,
					update.Message.Location.Longitude,
				)

				replyMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
				if err != nil {
					replyMsg.Text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: " + err.Error()
				} else {
					replyMsg.Text = weather
				}

				if _, err := bot.Send(replyMsg); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≥–æ–¥–æ–π –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: %v", err)
				}
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
		if update.CallbackQuery != nil {
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
			if _, err := bot.Request(callback); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞: %v", err)
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
			if strings.HasPrefix(update.CallbackQuery.Data, "forecast:") {
				city := strings.TrimPrefix(update.CallbackQuery.Data, "forecast:")

				forecast, err := getForecast(city)
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "")

				if err != nil {
					msg.Text = "‚ùå –û—à–∏–±–∫–∞: " + err.Error()
				} else {
					msg.Text = forecast
				}

				if _, err := bot.Send(msg); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º: %v", err)
				}
			}
		}
	}
}
